jenkins:
  # /configure (Base)
  systemMessage: |
    This Jenkins is 100% configured and managed 'as code'.
  numExecutors: 8
  mode: NORMAL
  quietPeriod: 3
  scmCheckoutRetryCount: 3
  projectNamingStrategy: standard

  # /configureSecurity/ (Base)
  disableRememberMe: false

  # /configureSecurity/ (Base)
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
      - id: "admin"
        password: demo2019

  # /configureSecurity/ (Authorization)
  authorizationStrategy:
    projectMatrix:
      grantedPermissions:
        - "Overall/Administer:admin"

  # /configureSecurity/ (Markup Formatter)
  markupFormatter: plainText

  # /configureSecurity/ (Agents)
  slaveAgentPort: 50000
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"

  # /configureSecurity/ (CSRF Protection)
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false

  # /configureSecurity/ (API Token)
  remotingSecurity:
    enabled: true

unclassified:
  # /configure (Pipeline Speed/Durability Settings)
  globaldefaultflowdurabilitylevel:
    durabilityHint: MAX_SURVIVABILITY

  # /configure (Timestamper)
  timestamperconfig:
    systemTimeFormat: "'<b>'HH:mm:ss'</b> '"
    elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"

  # /configure (Jenkins Location)
  location:
    adminAddress: "CI <ci@example.com>"
    url: http://127.0.0.1:8080/

  # /configure (Git plugin)
  gitscm:
    globalConfigName: "Git user name"
    globalConfigEmail: "user@example.com"

security:
  # /configureSecurity/ (CLI)
  remotingCLI:
    enabled: false

credentials:
  system:
    domainCredentials:
    - credentials:
      - usernamePassword:
          id: github-access-token
          scope: GLOBAL
          username: admin
          password: fake-token-key
          description: Github access token
      - string:
          id: example-string-secret
          scope: GLOBAL
          secret: super-secret

"jobs":
- "script": |
    multibranchPipelineJob('example-jenkins') {
      factory {
        workflowBranchProjectFactory {
          scriptPath('Jenkinsfile')
        }
      }
      description("Example multibranchPipelineJob")
      branchSources {
        branchSource {
          source {
            github {
              credentialsId('github-access-token')
              repoOwner('haos616')
              repository('example-jenkins')
              traits {
                cleanAfterCheckoutTrait()
                cleanBeforeCheckoutTrait()
                cloneOptionTrait {
                 extension {
                    noTags(false)
                    shallow(false)
                    depth(0)
                    reference(null)
                    timeout(null)
                  }
                }
                notificationContextTrait {
                  contextLabel('continuous-integration/jenkins')
                  typeSuffix(true)
                }
              }
            }
          }
          strategy {
            namedExceptionsBranchPropertyStrategy {
              defaultProperties {
                noTriggerBranchProperty()
                triggerPRCommentBranchProperty {
                  commentBody('.*test this jenkins.*')
                }
              }
              namedExceptions {
                named {
                  name('master')
                }
              }
            }
          }
        }
      }

      orphanedItemStrategy {
        discardOldItems {
          daysToKeep(10)
          numToKeep(10)
        }
      }

      triggers {
        periodicFolderTrigger {
          interval('1d')
        }
      }

      configure {
        def traits = it / sources / data / 'jenkins.branch.BranchSource' / source / traits
        traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
            strategyId(3)
        }

        traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
            strategyId(1)
            trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustEveryone')
        }
      }

    }
